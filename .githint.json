{
  "options": {
    "detectPull": true
  },
  "checks": {
    "Branch name format should be: {pivotal tracker id}-{story type}-{story summary}": {
      "script": "/^[\\d]+-((ft-)|(ch-)|(bg-))[a-z0-9\\-]+$/.test(branch.name)",
      "message": [
        "Branches should be named using the following format:",
        "{pivotal tracker id}-{story type}-{story summary}",
        "",
        "{pivotal tracker id} - The Id of the pivotal tracker story associated with the commit.",
        "",
        "{story type} - Indicates the context of the branch and should be one of:",
        "    * bg = Bug",
        "    * ch = Chore",
        "    * ft = Feature",
        "",
        "{story summary} - Short 2-3 words summary about what the branch contains",
        "    This can contain digits, lowercase alphabets, dash.",
        "",
        "Example: 111504508-ft-resources-rest-endpoints"
      ]
    },
    "Commit message should consist of header, body, footer": {
      "script": [
        "const message = commit.commit.message.trim()",
        "const messageLines = message.split('\\n')",
        "const len = messageLines.length",
        "if (len >= 5) {",
        "   if (messageLines[0].trim() !== '' && messageLines[1].trim() === '' && messageLines[2].trim() !== ''",
        "   && messageLines[len - 1].trim() !== '' && messageLines[len - 2].trim() === '' && messageLines[len - 3].trim() !== '') {",
        "       return true;",
        "   }",
        "}",
        "return false;"
      ],
      "message": "A commit message consists of a header, a body and a footer, separated by blank lines."
    },
    "Commit message should not have lines longer than 100 characters": {
      "script": [
        "const message = commit.commit.message.trim()",
        "const messageLines = message.split('\\n')",
        "return !(messageLines.find(line => line.length > 100));"
      ],
      "message": [
        "Any line of the commit message cannot be longer than 100 characters!",
        "This allows the message to be easier to read on github as well as in various git tools."
      ]
    },
    "Commit message header format should be: {type}-[{pivotal tracker id}]: {subject}": {
      "script": [
        "const message = commit.commit.message.trim()",
        "const messageLines = message.split('\\n')",
        "if (messageLines.length >= 5) {",
        "   const header = messageLines[0]",
        "   return /^(feat|fix|chore|docs|style|refactor|test)(-[?[0-9]+]?)?:\\s*.*$/.test(header)",
        "}",
        "return false;"
      ],
      "message": [
        "The message header is a single line that contains succinct description",
        "of the change containing a type, an optional scope and a subject.",
        "",
        "This describes the kind of change that this commit is providing.",
        "  * feat (feature)",
        "  * fix (bug fix)",
        "  * chore (maintain)",
        "  * docs (documentation)",
        "  * style (formatting, missing semi colons, â€¦)",
        "  * refactor",
        "  * test (when adding missing tests)"
      ]
    },
    "Commit message footer format should be: [(Finishes|Fixes|Delivers) #TRACKER_STORY_ID]": {
      "script": [
        "const message = commit.commit.message.trim()",
        "const messageLines = message.split('\\n')",
        "if (messageLines.length >= 5) {",
        "   const footer = messageLines[messageLines.length - 1]",
        "   return /^\\[([Ff]inishes|[Ff]ixes|[Dd]elivers)?\\s*#[0-9]+]$/.test(footer)",
        "}",
        "return false;"
      ],
      "message": [
        "Finished, fixed or delivered stories should be listed in the footer",
        "prefixed with 'Finishes', 'Fixes' , or 'Delivers' keyword like this:",
        "",
        "[Finishes #1234567]"
      ]
    },
    "PR title format should be: #{pivotal tracker id} {story description}": {
      "script": "/^#[0-9]+\\s*[\\w\\s-()]+$/.test(pull.title)",
      "message": [
        "Example of a valid PR title:",
        "",
        "#11504508 Build out REST Endpoint for Resources (CRUD)"
      ]
    },
    "PR description should contain relevant headings": {
      "script": [
        "const body = pull.body",
        "return body.indexOf('#### What does this PR do?') > -1",
        "       && body.indexOf('#### Description of Task to be completed?') > -1",
        "       && body.indexOf('#### How should this be manually tested?') > -1",
        "       && body.indexOf('#### Any background context you want to provide?') > -1",
        "       && body.indexOf('#### What are the relevant pivotal tracker stories?') > -1",
        "       && body.indexOf('#### Screenshots (if appropriate)') > -1",
        "       && body.indexOf('#### Questions:') > -1"
      ],
      "message": [
        "The description of the PR should contain the following headings",
        "and corresponding content in Markdown format.",
        "",
        "`#### What does this PR do?`",
        "`#### Description of Task to be completed?`",
        "`#### How should this be manually tested?`",
        "`#### Any background context you want to provide?`",
        "`#### What are the relevant pivotal tracker stories?`",
        "`#### Screenshots (if appropriate)`",
        "`#### Questions:`"
      ]
    }
  }
}
